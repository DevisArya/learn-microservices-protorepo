// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: field/field.proto

package field

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FieldService_GetFields_FullMethodName   = "/field.FieldService/GetFields"
	FieldService_GetField_FullMethodName    = "/field.FieldService/GetField"
	FieldService_CreateField_FullMethodName = "/field.FieldService/CreateField"
	FieldService_UpdateField_FullMethodName = "/field.FieldService/UpdateField"
	FieldService_DeleteField_FullMethodName = "/field.FieldService/DeleteField"
)

// FieldServiceClient is the client API for FieldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FieldServiceClient interface {
	GetFields(ctx context.Context, in *GetFieldsRequest, opts ...grpc.CallOption) (*GetFieldsResponse, error)
	GetField(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GetFieldResponse, error)
	CreateField(ctx context.Context, in *CreateFieldRequest, opts ...grpc.CallOption) (*CreateFieldResponse, error)
	UpdateField(ctx context.Context, in *UpdateFieldRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	DeleteField(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StatusResponse, error)
}

type fieldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFieldServiceClient(cc grpc.ClientConnInterface) FieldServiceClient {
	return &fieldServiceClient{cc}
}

func (c *fieldServiceClient) GetFields(ctx context.Context, in *GetFieldsRequest, opts ...grpc.CallOption) (*GetFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFieldsResponse)
	err := c.cc.Invoke(ctx, FieldService_GetFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldServiceClient) GetField(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GetFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFieldResponse)
	err := c.cc.Invoke(ctx, FieldService_GetField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldServiceClient) CreateField(ctx context.Context, in *CreateFieldRequest, opts ...grpc.CallOption) (*CreateFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFieldResponse)
	err := c.cc.Invoke(ctx, FieldService_CreateField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldServiceClient) UpdateField(ctx context.Context, in *UpdateFieldRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, FieldService_UpdateField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldServiceClient) DeleteField(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, FieldService_DeleteField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FieldServiceServer is the server API for FieldService service.
// All implementations must embed UnimplementedFieldServiceServer
// for forward compatibility.
type FieldServiceServer interface {
	GetFields(context.Context, *GetFieldsRequest) (*GetFieldsResponse, error)
	GetField(context.Context, *Id) (*GetFieldResponse, error)
	CreateField(context.Context, *CreateFieldRequest) (*CreateFieldResponse, error)
	UpdateField(context.Context, *UpdateFieldRequest) (*StatusResponse, error)
	DeleteField(context.Context, *Id) (*StatusResponse, error)
	mustEmbedUnimplementedFieldServiceServer()
}

// UnimplementedFieldServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFieldServiceServer struct{}

func (UnimplementedFieldServiceServer) GetFields(context.Context, *GetFieldsRequest) (*GetFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFields not implemented")
}
func (UnimplementedFieldServiceServer) GetField(context.Context, *Id) (*GetFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetField not implemented")
}
func (UnimplementedFieldServiceServer) CreateField(context.Context, *CreateFieldRequest) (*CreateFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateField not implemented")
}
func (UnimplementedFieldServiceServer) UpdateField(context.Context, *UpdateFieldRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateField not implemented")
}
func (UnimplementedFieldServiceServer) DeleteField(context.Context, *Id) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteField not implemented")
}
func (UnimplementedFieldServiceServer) mustEmbedUnimplementedFieldServiceServer() {}
func (UnimplementedFieldServiceServer) testEmbeddedByValue()                      {}

// UnsafeFieldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FieldServiceServer will
// result in compilation errors.
type UnsafeFieldServiceServer interface {
	mustEmbedUnimplementedFieldServiceServer()
}

func RegisterFieldServiceServer(s grpc.ServiceRegistrar, srv FieldServiceServer) {
	// If the following call pancis, it indicates UnimplementedFieldServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FieldService_ServiceDesc, srv)
}

func _FieldService_GetFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServiceServer).GetFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FieldService_GetFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServiceServer).GetFields(ctx, req.(*GetFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldService_GetField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServiceServer).GetField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FieldService_GetField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServiceServer).GetField(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldService_CreateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServiceServer).CreateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FieldService_CreateField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServiceServer).CreateField(ctx, req.(*CreateFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldService_UpdateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServiceServer).UpdateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FieldService_UpdateField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServiceServer).UpdateField(ctx, req.(*UpdateFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldService_DeleteField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServiceServer).DeleteField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FieldService_DeleteField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServiceServer).DeleteField(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// FieldService_ServiceDesc is the grpc.ServiceDesc for FieldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FieldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "field.FieldService",
	HandlerType: (*FieldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFields",
			Handler:    _FieldService_GetFields_Handler,
		},
		{
			MethodName: "GetField",
			Handler:    _FieldService_GetField_Handler,
		},
		{
			MethodName: "CreateField",
			Handler:    _FieldService_CreateField_Handler,
		},
		{
			MethodName: "UpdateField",
			Handler:    _FieldService_UpdateField_Handler,
		},
		{
			MethodName: "DeleteField",
			Handler:    _FieldService_DeleteField_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "field/field.proto",
}
